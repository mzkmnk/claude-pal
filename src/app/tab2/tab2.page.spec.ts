import { ComponentFixture, TestBed } from '@angular/core/testing';
import { Tab2Page } from './tab2.page';
import { ToastController, AlertController, Platform } from '@ionic/angular';
import { SSHService } from '../core/services/ssh.service';
import { TerminalComponent } from '../shared/components/terminal';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { of } from 'rxjs';

// TerminalComponent„ÅÆ„É¢„ÉÉ„ÇØ
@Component({
  selector: 'app-terminal',
  template: '',
})
class MockTerminalComponent {
  @Input() options: any;
  @Output() ready = new EventEmitter<void>();
  @Output() terminalData = new EventEmitter<string>();
  @Output() terminalResize = new EventEmitter<{ cols: number; rows: number }>();
  @Output() gesture = new EventEmitter<any>();

  write = jasmine.createSpy('write');
  writeln = jasmine.createSpy('writeln');
  clear = jasmine.createSpy('clear');
  updateTheme = jasmine.createSpy('updateTheme');
  updateFontSize = jasmine.createSpy('updateFontSize');
  search = jasmine.createSpy('search');
  copySelection = jasmine.createSpy('copySelection');
}

describe('Tab2Page', () => {
  let component: Tab2Page;
  let fixture: ComponentFixture<Tab2Page>;
  let toastControllerSpy: jasmine.SpyObj<ToastController>;
  let alertControllerSpy: jasmine.SpyObj<AlertController>;
  let sshServiceSpy: jasmine.SpyObj<SSHService>;

  beforeEach(async () => {
    const toastSpy = jasmine.createSpyObj('ToastController', ['create']);
    const toastElementSpy = jasmine.createSpyObj('HTMLIonToastElement', [
      'present',
      'dismiss',
    ]);
    toastElementSpy.present.and.returnValue(Promise.resolve());
    toastSpy.create.and.returnValue(Promise.resolve(toastElementSpy));

    const alertSpy = jasmine.createSpyObj('AlertController', ['create']);
    const alertElementSpy = jasmine.createSpyObj('HTMLIonAlertElement', [
      'present',
      'dismiss',
    ]);
    alertElementSpy.present.and.returnValue(Promise.resolve());
    alertSpy.create.and.returnValue(Promise.resolve(alertElementSpy));

    const platformSpyObj = jasmine.createSpyObj('Platform', ['is']);
    platformSpyObj.is.and.returnValue(false);

    const sshServiceSpyObj = jasmine.createSpyObj(
      'SSHService',
      ['sendData', 'resize', 'disconnect'],
      { dataStream$: of('') }
    );

    await TestBed.configureTestingModule({
      imports: [Tab2Page],
      providers: [
        { provide: ToastController, useValue: toastSpy },
        { provide: AlertController, useValue: alertSpy },
        { provide: Platform, useValue: platformSpyObj },
        { provide: SSHService, useValue: sshServiceSpyObj },
      ],
    })
      .overrideComponent(Tab2Page, {
        remove: { imports: [TerminalComponent] },
        add: { imports: [MockTerminalComponent] },
      })
      .compileComponents();

    fixture = TestBed.createComponent(Tab2Page);
    component = fixture.componentInstance;
    toastControllerSpy = TestBed.inject(
      ToastController
    ) as jasmine.SpyObj<ToastController>;
    alertControllerSpy = TestBed.inject(
      AlertController
    ) as jasmine.SpyObj<AlertController>;
    sshServiceSpy = TestBed.inject(SSHService) as jasmine.SpyObj<SSHService>;

    // Component„ÅÆtoastController„ÇíÊòéÁ§∫ÁöÑ„Å´Ë®≠ÂÆö
    (component as any).toastController = toastControllerSpy;
    (component as any).alertController = alertControllerSpy;
  });

  it('„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå‰ΩúÊàê„Åß„Åç„Çã„Åì„Å®', () => {
    expect(component).toBeTruthy();
  });

  describe('ngAfterViewInit', () => {
    it('„Ç¶„Çß„É´„Ç´„É†„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', done => {
      const mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
      component.ngAfterViewInit();

      setTimeout(() => {
        expect(mockTerminal.writeln).toHaveBeenCalledWith(
          'Welcome to Claude PAL Terminal Demo! üöÄ'
        );
        expect(mockTerminal.writeln).toHaveBeenCalledWith('');
        expect(mockTerminal.writeln).toHaveBeenCalledWith(
          'This is a demonstration of the terminal component.'
        );
        expect(mockTerminal.write).toHaveBeenCalledWith('$ ');
        done();
      }, 600);
    });
  });

  describe('onTerminalData', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('Êú™Êé•Á∂öÊôÇ„Å´„É≠„Éº„Ç´„É´„Ç®„Ç≥„Éº„ÅåÂãï‰Ωú„Åô„Çã„Åì„Å®', () => {
      component.isConnected = false;
      component.onTerminalData('test');

      expect(mockTerminal.write).toHaveBeenCalledWith('test');
    });

    it('Êé•Á∂öÊôÇ„Å´SSH„Çµ„Éº„Éì„Çπ„Å´„Éá„Éº„Çø„ÅåÈÄÅ‰ø°„Åï„Çå„Çã„Åì„Å®', () => {
      component.isConnected = true;
      component.onTerminalData('test');

      expect(sshServiceSpy.sendData).toHaveBeenCalledWith('test');
    });
  });

  describe('onTerminalResize', () => {
    it('Êé•Á∂öÊôÇ„Å´SSH„Çµ„Éº„Éì„Çπ„Å´„É™„Çµ„Ç§„Ç∫„ÅåÈÄöÁü•„Åï„Çå„Çã„Åì„Å®', () => {
      component.isConnected = true;
      const size = { cols: 80, rows: 24 };

      component.onTerminalResize(size);

      expect(sshServiceSpy.resize).toHaveBeenCalledWith(80, 24);
    });

    it('Êú™Êé•Á∂öÊôÇ„ÅØ„É™„Çµ„Ç§„Ç∫„ÅåÈÄöÁü•„Åï„Çå„Å™„ÅÑ„Åì„Å®', () => {
      component.isConnected = false;
      const size = { cols: 80, rows: 24 };

      component.onTerminalResize(size);

      expect(sshServiceSpy.resize).not.toHaveBeenCalled();
    });
  });

  describe('onGesture', () => {
    it('„ÉÄ„Éñ„É´„Çø„ÉÉ„Éó„ÅßÂÖ®ÁîªÈù¢Âàá„ÇäÊõø„Åà„ÅåÂëº„Å∞„Çå„Çã„Åì„Å®', async () => {
      spyOn(component, 'toggleFullscreen');

      await component.onGesture({ type: 'doubletap' });

      expect(component.toggleFullscreen).toHaveBeenCalled();
    });

    it('„Çπ„ÉØ„Ç§„Éó„Åß„Éà„Éº„Çπ„Éà„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', async () => {
      await component.onGesture({ type: 'swipe', direction: 'left' });

      expect(toastControllerSpy.create).toHaveBeenCalled();
    });
  });

  describe('executeCommand', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('ls„Ç≥„Éû„É≥„Éâ„ÅåÂÆüË°å„Åï„Çå„Çã„Åì„Å®', () => {
      component.isConnected = false;
      component.executeCommand('ls -la');

      expect(mockTerminal.writeln).toHaveBeenCalledWith('ls -la');
      expect(mockTerminal.writeln).toHaveBeenCalledWith('total 48');
    });

    it('pwd„Ç≥„Éû„É≥„Éâ„ÅåÂÆüË°å„Åï„Çå„Çã„Åì„Å®', () => {
      component.isConnected = false;
      component.executeCommand('pwd');

      expect(mockTerminal.writeln).toHaveBeenCalledWith('pwd');
      expect(mockTerminal.writeln).toHaveBeenCalledWith(
        '/home/user/claude-pal'
      );
    });
  });

  describe('connect', () => {
    it('Êé•Á∂öÁ¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®', async () => {
      await component.connect();

      expect(alertControllerSpy.create).toHaveBeenCalledWith({
        header: 'SSHÊé•Á∂ö„Éá„É¢',
        message: '„É¢„ÉÉ„ÇØSSH„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇÂÆüÈöõ„ÅÆÊé•Á∂ö„ÅØË°å„Çè„Çå„Åæ„Åõ„Çì„ÄÇ',
        buttons: jasmine.any(Array),
      });
    });
  });

  describe('disconnect', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('Êé•Á∂ö„ÅåÂàáÊñ≠„Åï„Çå„Çã„Åì„Å®', async () => {
      component.isConnected = true;

      await component.disconnect();

      expect(component.isConnected).toBe(false);
      expect(sshServiceSpy.disconnect).toHaveBeenCalled();
      expect(toastControllerSpy.create).toHaveBeenCalled();
    });
  });

  describe('clearTerminal', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('„Çø„Éº„Éü„Éä„É´„Åå„ÇØ„É™„Ç¢„Åï„Çå„Çã„Åì„Å®', () => {
      component.clearTerminal();

      expect(mockTerminal.clear).toHaveBeenCalled();
      expect(mockTerminal.write).toHaveBeenCalledWith('$ ');
    });
  });

  describe('toggleTheme', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('„ÉÜ„Éº„Éû„ÅåÂàá„ÇäÊõø„Çè„Çã„Åì„Å®', () => {
      component.currentTheme = 'dark';
      component.toggleTheme();

      expect(component.currentTheme).toBe('light');
      expect(mockTerminal.updateTheme).toHaveBeenCalled();
    });
  });

  describe('changeFontSize', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÅåÂ§âÊõ¥„Åï„Çå„Çã„Åì„Å®', () => {
      component.fontSize = 14;
      component.changeFontSize(2);

      expect(component.fontSize).toBe(16);
      expect(mockTerminal.updateFontSize).toHaveBeenCalledWith(16);
    });

    it('„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÅåÊúÄÂ∞èÂÄ§„ÅßÂà∂Èôê„Åï„Çå„Çã„Åì„Å®', () => {
      component.fontSize = 8;
      component.changeFontSize(-2);

      expect(component.fontSize).toBe(8);
      expect(mockTerminal.updateFontSize).toHaveBeenCalledWith(8);
    });

    it('„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÅåÊúÄÂ§ßÂÄ§„ÅßÂà∂Èôê„Åï„Çå„Çã„Åì„Å®', () => {
      component.fontSize = 24;
      component.changeFontSize(2);

      expect(component.fontSize).toBe(24);
      expect(mockTerminal.updateFontSize).toHaveBeenCalledWith(24);
    });
  });

  describe('copySelection', () => {
    let mockTerminal: MockTerminalComponent;

    beforeEach(() => {
      mockTerminal = new MockTerminalComponent();
      component.terminal = mockTerminal as any;
    });

    it('ÈÅ∏Êäû„ÉÜ„Ç≠„Çπ„Éà„Åå„Ç≥„Éî„Éº„Åï„Çå„Çã„Åì„Å®', async () => {
      await component.copySelection();

      expect(mockTerminal.copySelection).toHaveBeenCalled();
      expect(toastControllerSpy.create).toHaveBeenCalled();
    });
  });
});
